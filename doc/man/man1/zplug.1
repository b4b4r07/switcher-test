'\" t
.\"     Title: zplug
.\"    Author: [see the "Authors" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 01/13/2016
.\"    Manual: ZPLUG Manual
.\"    Source: ZPLUG Manual
.\"  Language: English
.\"
.TH "ZPLUG" "1" "01/13/2016" "ZPLUG Manual" "ZPLUG Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zplug \- A next\-generation plugin manager for zsh
.SH "SYNOPSIS"
.sp
.nf
\fIzplug\fR [\fI"username/reponame"\fR[, \fItag:"value"\fR[,\&...]]]
    [<command> [<options>] [<\fIpackage\fR>]]
.fi
.sp
.nf
The word of \'package\' means that it consists of "username/reponame"\&.
.fi
.SH "DESCRIPTION"
.sp
zplug is a super fast and next\-generation plugin manager for zsh\&. zplug can manage everything, for example, zsh plugins, UNIX commands, Gist files, GitHub Releases, local plugins and so on\&. Unlike antigen, zplug requires no ZSH plugin file (*\&.plugin\&.zsh)\&. It\(cqs so fantabulous manager\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Can manage everything
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Zsh plugins/UNIX commands on
GitHub
and
Bitbucket
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Gist file (gist\&.github\&.com)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Externally managed plugins e\&.g\&.,
oh\-my\-zsh
plugins/themes
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Birary artifacts on
GitHub Releases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Local plugins
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
etc\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Super\-fast parallel installation/update
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Branch/tag/commit support
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Post\-update hooks
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Dependencies between plugins
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Unlike
antigen, no ZSH plugin file (*\&.plugin\&.zsh) required
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Interactive interface (fzf,
peco,
zaw, and so on)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Cache mechanism for reducing the startup time
.RE
.SH "COMMANDS"
.PP
\fBhelp\fR
.RS 4
Prints the synopsis and a list of all available commands\&.
.RE
.PP
\fBversion\fR
.RS 4
Prints zplug version\&.
.RE
.PP
\fBcheck\fR [\-\-verbose] [\fIpackage\fR]
.RS 4
Check whether there is not installed item\&. If the
\fIpackage\fR
name (username/reponame) is passed, check if the package is installed\&. If
\-\-verbose
option is passed, print extra debugging information\&.
.RE
.PP
\fBclean\fR [\-\-force] [\-\-select] [\fIpackage\fR]
.RS 4
Uninstall
\fIpackage\fR
with yes/no prompt\&. If
\-\-force
option is passed, suppress that prompt and force to uninstall the
\fIpackage\fR\&. If
\-\-select
option is passed, by using one of the filter chosen by
$ZPLUG_FILTER, you can interactively select
\fIpackage\fR
you want to uninstall\&.
.RE
.PP
\fBclear\fR [\-\-force]
.RS 4
Refresh cache file\&. If
\-\-force
option is passed, it is the same with
\fBclean\fR
command\&.
.RE
.PP
\fBinstall\fR [\-\-verbose] [\-\-select] [\fIpackage\fR]
.RS 4
Install
\fIpackage\fR\&. If
\-\-verbose
/
\-\-select
option is passed, it is the same with the other command\&.
.RE
.PP
\fBlist\fR [\-\-verbose] [\-\-select] [\fIpackage\fR]
.RS 4
List all installed
\fIpackage\fR\&. If
\-\-verbose
/
\-\-select
option is passed, it is the same with the other command\&.
.RE
.PP
\fBload\fR [\-\-verbose]
.RS 4
Load
\fIpackage\fR\&. The all
\fIpackage\fR
with
\fIas:plugin\fR
are sourced into current zsh process and add the directory of that
\fIpackage\fR
to
$fpath\&. In addition, the all
\fIpackage\fR
with
\fIas:command\fR
are linked to
$ZPLUG_HOME/bin
and the bin directory is added to
$PATH\&. If
\-\-verbose
is passed, it is the same with the other command\&.
.RE
.PP
\fBstatus\fR [\-\-select]
.RS 4
Fetch the newest version of the installed
\fIpackage\fR
by zplug\&. If
\-\-select
is passed, it is the same with the other command\&.
.RE
.PP
\fBupdate\fR [\-\-self] [\-\-select] [\fIpackage\fR]
.RS 4
Update
\fIpackage\fR\&. If
\-\-self
is passed, update your copy of zplug and create symbolic link to
$ZPLUG_HOME/zplug
If
\-\-select
is passed, it is the same with the other command\&.
.RE
.SH "TAGS"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&zplug available tag list
.TS
allbox tab(:);
ltB ltB ltB ltB.
T{
Tag
T}:T{
Description
T}:T{
Value (default)
T}:T{
Example
T}
.T&
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt
lt lt lt lt.
T{
.sp
\fBas\fR
T}:T{
.sp
Specify whether to register as commands or to register as plugins
T}:T{
.sp
plugin,command (plugin)
T}:T{
.sp
as:command
T}
T{
.sp
\fBof\fR
T}:T{
.sp
Specify the pattern to source files (for plugin) or specify relative path to add to the $PATH (for command) / In case of from:gh\-r, can specify of:"*darwin*{amd,386}*" and so on
T}:T{
.sp
\fBglob\fR (of:"*\&.zsh")
T}:T{
.sp
of:bin,of:"*\&.sh", of:"*darwin*"
T}
T{
.sp
\fBfrom\fR
T}:T{
.sp
Specify the services you use to install
T}:T{
.sp
github,bitbucket,gh\-r,gist, oh\-my\-zsh,local (github)
T}:T{
.sp
from:gh\-r
T}
T{
.sp
\fBat\fR
T}:T{
.sp
Support branch/tag installation
T}:T{
.sp
\fBbranch/tag\fR (master)
T}:T{
.sp
at:v1\&.5\&.6
T}
T{
.sp
\fBfile\fR
T}:T{
.sp
Specify filename you want to rename (only as:plugin)
T}:T{
.sp
\fBfilename\fR (\-)
T}:T{
.sp
file:fzf
T}
T{
.sp
\fBdir\fR
T}:T{
.sp
Installation directory which is managed by zplug
T}:T{
.sp
\fBREAD ONLY\fR
T}:T{
.sp
dir:/path/to/user/repo
T}
T{
.sp
\fBif\fR
T}:T{
.sp
Specify the conditions under which to run source or add to $PATH
T}:T{
.sp
\fBboolean\fR (\-)
T}:T{
.sp
if:"[ \-d ~/\&.zsh ]"
T}
T{
.sp
\fBdo\fR
T}:T{
.sp
Run commands after installation/update
T}:T{
.sp
\fBcommands\fR (\-)
T}:T{
.sp
do:make install
T}
T{
.sp
\fBfrozen\fR
T}:T{
.sp
Do not update unless explicitly specified
T}:T{
.sp
0,1 (0)
T}:T{
.sp
frozen:1
T}
T{
.sp
\fBcommit\fR
T}:T{
.sp
Support commit installation (regardless of whether the $ZPLUG_SHALLOW is true or not)
T}:T{
.sp
\fBrevision\fR (\-)
T}:T{
.sp
commit:4428d48
T}
T{
.sp
\fBon\fR
T}:T{
.sp
Dependencies
T}:T{
.sp
\fBREAD ONLY\fR
T}:T{
.sp
on:user/repo
T}
T{
.sp
\fBnice\fR
T}:T{
.sp
Priority of loading the plugins\&. If this tag is specified 10 or more, zplug will load plugins after compinit (see also #26)
T}:T{
.sp
\-20\&.\&.19 (0)
T}:T{
.sp
nice:19
T}
T{
.sp
\fBignore\fR
T}:T{
.sp
Similar to of tag, specify exception pattern so as not to load the files you want to ignore (see also #56)
T}:T{
.sp
\fBglob\fR (\-)
T}:T{
.sp
ignore:"some_*\&.zsh"
T}
.TE
.sp 1
.sp
You can register plugins or commands to zplug on the command\-line\&. If you use zplug on the command\-line, it is possible to write more easily its settings by grace of the command\-line completion\&. In this case, zplug spit out its settings to $ZPLUG_EXTERNAL instead of \&.zshrc\&. If you launch new zsh process, zplug load command automatically search this file and run source command\&.
.SH "ENVIRONMENT VARIABLES"
.sp
Various zplug commands use the following environment variables:
.PP
\fIZPLUG_HOME\fR
.RS 4
Defaults to
~/\&.zplug\&. zplug will store/load plugins in this directory\&. The directory structure is below\&.
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
$ZPLUG_HOME
|\-\- bin
|   `\-\- some_command \-> \&.\&./repos/username_A/reponame1/some_command
`\-\- repos
    |\-\- username_A
    |   |\-\- reponame1
    |   |   |\-\- README\&.md
    |   |   `\-\- some_command
    |   `\-\- reponame2
    |       |\-\- README\&.md
    |       `\-\- some_plugin\&.zsh
    `\-\- username_B
        `\-\- reponame1
.fi
.if n \{\
.RE
.\}
.sp
If you specify \fIas:command\fR in zplug command, zplug will recognize the plugin as a command and create a symbolic link of the same name (if you want to rename it, set file: tag) within $ZPLUG_HOME/bin\&. Because zplug adds $ZPLUG_HOME/bin to the $PATH, you can run that command from any directories\&.
.PP
\fIZPLUG_THREADS\fR
.RS 4
The number of threads zplug should use\&. The default value is 16\&.
.RE
.PP
\fIZPLUG_PROTOCOL\fR
.RS 4
Defaults to HTTPS\&. Valid options for
$ZPLUG_PROTOCOL
are HTTPS or SSH\&. Unless you have a specific reason, you should use the HTTPS protocol\&. For more information, see also
Which remote URL should I use? \- GitHub Help
.RE
.PP
\fIZPLUG_SHALLOW\fR
.RS 4
Defaults to
true\&. When cloning a Git repository, there is an option to limit the amount of history your clone will have\&. If you set this environment variable to
true, you get the least amount of history, and you create a shallow clone\&.
.RE
.PP
\fIZPLUG_FILTER\fR
.RS 4
Defaults to
fzf\-tmux:fzf:peco:percol:zaw\&. When
\-\-select
option is specified, colon\-separated first element that exists in the
$PATH
will be used by zplug as the interactive filter\&. The
ZPLUG_FILTER
also accepts the following values:
fzf\-tmux \-d "10%":/path/to/peco:my peco\&.
.RE
.PP
\fIZPLUG_EXTERNAL\fR
.RS 4
Defaults to
$ZPLUG_HOME/init\&.zsh\&. This file is used to add plugins from zplug on the command\-line\&.
.RE
.PP
\fIZPLUG_USE_CACHE\fR
.RS 4
Defaults to
true\&. If this variable is set, zplug comes to use a cache to speed up when it will load plugins after the first\&. The cache file is located in
$ZPLUG_HOME/\&.cache\&. If you want to clear the cache, please run
zplug clear
or do the following:
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
$ ZPLUG_USE_CACHE=false zplug load
.fi
.if n \{\
.RE
.\}
.SH "EXTERNAL COMMANDS"
.sp
zplug, like \fIgit(1)\fR, supports external commands\&. These are executable scripts that reside somewhere in the PATH, named zplug\-cmdname, which can be invoked like zplug cmdname\&. This allows you to create your own commands without modifying zplug\(cqs internals\&.
.SH "CONFIGURATION MECHANISM"
.sp
Add a zplug section to your \&.zshrc:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
List the plugins/commands with zplug commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}

zplug load
to source the plugins and add its commands to your
$PATH
.RE
.sp
.if n \{\
.RS 4
.\}
.nf
source ~/\&.zplug/zplug

# Make sure you use double quotes
zplug "zsh\-users/zsh\-history\-substring\-search"

# Can manage a plugin as a command
# And accept glob patterns (e\&.g\&., brace, wildcard, \&.\&.\&.)
zplug "Jxck/dotfiles", as:command, of:"bin/{histuniq,color}"

# Can manage everything e\&.g\&., other person\'s zshrc
zplug "tcnksm/docker\-alias", of:zshrc

# Prohibit updates to a plugin by using the "frozen:" tag
zplug "k4rthik/git\-cal", as:command, frozen:1

# Grab binaries from GitHub Releases
# and rename to use "file:" tag
zplug "junegunn/fzf\-bin", \e
    as:command, \e
    from:gh\-r, \e
    file:fzf, \e
    of:"*darwin*amd64*"

# Support oh\-my\-zsh plugins and the like
zplug "plugins/git",   from:oh\-my\-zsh, if:"which git"
zplug "themes/duellj", from:oh\-my\-zsh
zplug "lib/clipboard", from:oh\-my\-zsh, if:"[[ $OSTYPE == *darwin* ]]"

# Run a command after a plugin is installed/updated
zplug "tj/n", do:"make install"

# Support checking out a specific branch/tag/commit of a plugin
zplug "b4b4r07/enhancd", at:v1
zplug "mollifier/anyframe", commit:4c23cb60

# Install if "if:" tag returns true
zplug "hchbaw/opp\&.zsh", if:"(( ${ZSH_VERSION%%\&.*} < 5 ))"

# Can manage gist file just like other plugins
zplug "b4b4r07/79ee61f7c140c63d2786", \e
    from:gist, \e
    as:command, \e
    of:get_last_pane_path\&.sh

# Support bitbucket
zplug "b4b4r07/hello_bitbucket", \e
    as:command, \e
    from:bitbucket, \e
    do:"chmod 755 *\&.sh", \e
    of:"*\&.sh"

# Group dependencies, emoji\-cli depends on jq in this example
zplug "stedolan/jq", \e
    as:command, \e
    file:jq, \e
    from:gh\-r \e
    | zplug "b4b4r07/emoji\-cli"

# Set priority to load command like a nice command
# e\&.g\&., zsh\-syntax\-highlighting must be loaded
# after executing compinit command and sourcing other plugins
zplug "zsh\-users/zsh\-syntax\-highlighting", nice:10

# Can manage local plugins
zplug "~/\&.zsh", from:local
# A relative path is resolved with respect to the $ZPLUG_HOME
zplug "repos/robbyrussell/oh\-my\-zsh/custom/plugins/my\-plugin", from:local

# Install plugins if there are plugins that have not been installed
if ! zplug check \-\-verbose; then
    printf "Install? [y/N]: "
    if read \-q; then
        echo; zplug install
    fi
fi

# Then, source plugins and add commands to $PATH
zplug load \-\-verbose
.fi
.if n \{\
.RE
.\}
.sp
Finally, use zplug install to install your plugins and reload \&.zshrc\&.
.SH "FURTHER DOCUMENTATION"
.sp
See the references in official wiki page to get started using zplug\&. The following is probably more detail than necessary for a first\-time user\&.
.SH "AUTHORS"
.sp
zplug was originally written by Masaki Ishi (a\&.k\&.a @b4b4r07)\&. Many people have contributed to it\&.
.SH "COPYING"
.sp
Copyright (C) 2015\-2016 Masaki Ishi
.sp
MIT License
.SH "REPORTING BUGS"
.sp
Report bugs to the zplug issues
