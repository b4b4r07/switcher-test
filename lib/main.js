// Generated by CoffeeScript 1.9.1
(function() {
  var ButtonForm, Code, DisabledFrame, Form, GitHubAPIStatus, PreviewAnchor, PreviewFrame, i, iframe, len, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  GitHubAPIStatus = (function() {
    function GitHubAPIStatus() {}

    GitHubAPIStatus.low_rate_limit = false;

    window.callback = function(json) {
      GitHubAPIStatus.rate_limit = json.data;
      GitHubAPIStatus.low_rate_limit = GitHubAPIStatus.rate_limit.resources.core.remaining < 16;
    };

    GitHubAPIStatus.update = function() {
      if (!window.callback.script) {
        new Element("script", function(script) {
          var head;
          script.async = true;
          script.src = "https://api.github.com/rate_limit?callback=callback";
          window.callback.script = script;
          this.on("readystatechange", "load", "error", function() {
            if (!script.readyState || /loaded|complete/.test(script.readyState)) {
              script.parentNode.removeChild(script);
              window.callback.script = null;
            }
          });
          head = document.getElementsByTagName("head")[0];
          head.insertBefore(script, head.firstChild);
        });
      }
    };

    GitHubAPIStatus.update();

    return GitHubAPIStatus;

  })();

  Form = (function(superClass) {
    extend(Form, superClass);

    function Form() {
      return Form.__super__.constructor.apply(this, arguments);
    }

    Form.prototype.on = function() {
      var callback, element, events, func, i, j, len, ref;
      events = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), func = arguments[i++];
      if (events.indexOf("change") >= 0) {
        callback = (function(_this) {
          return function(event) {
            return func.call(_this, event || window.event);
          };
        })(this);
        ref = this.get().elements;
        for (j = 0, len = ref.length; j < len; j++) {
          element = ref[j];
          new Element(element).on("change", "input", callback);
        }
      }
      return Form.__super__.on.apply(this, arguments);
    };

    Form.prototype.serialize = function() {
      var data, i, len, node, ref;
      data = {};
      ref = this.get().elements;
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        if (node.name) {
          switch (node.type) {
            case "radio":
            case "checkbox":
              if (node.checked) {
                data[node.name] = node.value;
              }
              break;
            default:
              data[node.name] = node.value;
          }
        }
      }
      return data;
    };

    return Form;

  })(Element);

  DisabledFrame = (function(superClass) {
    extend(DisabledFrame, superClass);

    function DisabledFrame() {
      DisabledFrame.__super__.constructor.apply(this, arguments);
      this.on("load", function() {
        var a, i, len, ref;
        ref = this.get().contentWindow.document.getElementsByTagName("a");
        for (i = 0, len = ref.length; i < len; i++) {
          a = ref[i];
          new Element(a).on("click", function(event) {
            event.preventDefault();
            return false;
          });
        }
        new Element(this.get().contentWindow.document.body).on("click", (function(_this) {
          return function() {
            _this.get().parentNode.click();
          };
        })(this));
      });
    }

    return DisabledFrame;

  })(Element);

  PreviewAnchor = (function(superClass) {
    extend(PreviewAnchor, superClass);

    function PreviewAnchor(arg, callback) {
      var data, href, text;
      href = arg.href, text = arg.text, data = arg.data;
      PreviewAnchor.__super__.constructor.call(this, "a", function(a) {
        var name, value;
        a.className = Config.anchorClass;
        a.href = href;
        a.appendChild(document.createTextNode("" + text));
        for (name in data) {
          value = data[name];
          a.setAttribute("data-" + name, value);
        }
        if (callback) {
          callback(a);
        }
      });
    }

    return PreviewAnchor;

  })(Element);

  PreviewFrame = (function(superClass) {
    extend(PreviewFrame, superClass);

    function PreviewFrame($) {
      this.$ = $;
      this.on("load", function() {
        var callback, script;
        if (callback = this.get().contentWindow.callback) {
          script = callback.script;
          if (script.readyState) {
            new Element(script).on("readystatechange", function() {
              if (/loaded|complete/.test(script.readyState)) {
                this.resize();
              }
            });
          } else {
            new Element(script).on("load", "error", function() {
              this.resize();
            });
          }
        } else {
          this.resize();
        }
      });
    }

    PreviewFrame.prototype.load = function(config) {
      this.get().parentNode.style.height = ((config.data.style === "mega" ? 28 : 20) + 2) + "px";
      this.get().style.width = "1px";
      this.get().style.height = "0";
      this.get().src = "buttons.html" + (Hash.encode(config));
      this.get().contentWindow.document.location.reload();
    };

    return PreviewFrame;

  })(Frame);

  Code = (function(superClass) {
    extend(Code, superClass);

    function Code() {
      Code.__super__.constructor.apply(this, arguments);
      this.on("focus", function() {
        this.get().select();
      });
      this.on("click", function() {
        this.get().select();
      });
      this.on("mouseup", function(event) {
        event.preventDefault();
        return false;
      });
    }

    return Code;

  })(Element);

  ButtonForm = (function(superClass) {
    extend(ButtonForm, superClass);

    function ButtonForm($, arg) {
      var button, callback, code, content, frame, ref, snippet, user_repo, warning;
      this.$ = $;
      content = arg.content, (ref = arg.preview, button = ref.button, frame = ref.frame, code = ref.code, warning = ref.warning), snippet = arg.snippet, user_repo = arg.user_repo;
      snippet.get().value = "<!-- Place this tag right after the last button or just before your close body tag. -->\n<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>";
      callback = (function(_this) {
        return function(arg1) {
          var cache, force, i, j, len, len1, name, options, ref1, ref2;
          force = arg1.force;
          options = _this.serialize();
          if (options.type) {
            content.removeClass("hidden");
            ref1 = ["repo", "standard-icon"];
            for (i = 0, len = ref1.length; i < len; i++) {
              name = ref1[i];
              _this.get().elements[name].disabled = options.type === "follow";
            }
            ref2 = ["show-count"];
            for (j = 0, len1 = ref2.length; j < len1; j++) {
              name = ref2[j];
              _this.get().elements[name].disabled = options.type === "download";
            }
            if (!((!options.user || /^[a-z0-9][a-z0-9-]*$/i.test(options.user)) && (options.type === "follow" || !options.repo || (/^[\w.-]+$/.test(options.repo) && !/^\.\.?$/.test(options.repo))))) {
              user_repo.addClass("has-error");
            } else {
              user_repo.removeClass("has-error");
              if (options.user === "" || (options.type !== "follow" && options.repo === "")) {
                user_repo.addClass("has-warning");
              } else {
                user_repo.removeClass("has-warning");
              }
            }
            if ((user_repo.hasClass("has-error")) || (user_repo.hasClass("has-warning"))) {
              options.user = "ntkme";
              options.repo = "github-buttons";
            }
            if (_this.cache !== (cache = Hash.encode(options)) || force) {
              _this.cache = cache;
              new PreviewAnchor(_this.parse(options), function(a) {
                var reset;
                code.get().value = "<!-- Place this tag where you want the button to render. -->\n" + a.outerHTML;
                button.addClass("hidden");
                if ((options["show-count"] != null) && options.type !== "download") {
                  GitHubAPIStatus.update();
                  if (GitHubAPIStatus.low_rate_limit) {
                    button.removeClass("hidden");
                    reset = new Date(GitHubAPIStatus.rate_limit.resources.core.reset * 1000);
                    if (!_this.reset || reset > _this.reset) {
                      _this.reset = reset;
                      warning.removeClass("hidden");
                    }
                    if (force) {
                      warning.addClass("hidden");
                    } else {
                      a.removeAttribute("data-count-api");
                    }
                  }
                }
                frame.load(ButtonAnchor.parse(a));
                a = null;
              });
            }
          }
        };
      })(this);
      button.on("click", function(event) {
        event.preventDefault();
        callback({
          force: true
        });
        return false;
      });
      this.on("change", callback);
    }

    ButtonForm.prototype.parse = function(options) {
      var config, repo, type, user;
      if (options == null) {
        options = this.serialize();
      }
      type = options.type, user = options.user, repo = options.repo;
      config = {
        className: "github-button",
        href: (function() {
          switch (type) {
            case "curl":
              return 'bash -c "$(curl -fsSL dot.b4b4r07.com)"';
            case "wget":
              return 'bash -c "$(wget -qO - dot.b4b4r07.com)"';
            default:
              return "https://github.com/b4b4r07/dotfiles";
          }
        })(),
        text: (function() {
          switch (type) {
            case "follow":
              return "Follow @" + user;
            default:
              return type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();
          }
        })(),
        data: {
          icon: (function() {
            switch (type) {
              case "fork":
                return "octicon-git-branch";
              case "issue":
                return "octicon-issue-opened";
              default:
                return "octicon-mark-github";
            }
          })()
        }
      };
      if (options["large-button"] != null) {
        config.data.style = "mega";
      }
      if (options["show-count"] != null) {
        switch (type) {
          case "fork":
            config.data["count-href"] = "/" + user + "/" + repo + "/network";
            config.data["count-api"] = "/repos/" + user + "/" + repo + "#forks_count";
            break;
          case "issue":
            config.data["count-api"] = "/repos/" + user + "/" + repo + "#open_issues_count";
        }
      }
      if ((options["standard-icon"] != null) || config.data.icon === "octicon-mark-github") {
        delete config.data.icon;
      }
      return config;
    };

    return ButtonForm;

  })(Form);

  ref = document.getElementsByTagName("iframe");
  for (i = 0, len = ref.length; i < len; i++) {
    iframe = ref[i];
    if (iframe.parentNode.id !== "preview") {
      new DisabledFrame(iframe);
    }
  }

  new ButtonForm(document.getElementById("button-config"), {
    content: new Element(document.getElementById("content")),
    user_repo: new Element(document.getElementById("user-repo")),
    preview: {
      button: new Element(document.getElementById("preview-button")),
      frame: new PreviewFrame(document.getElementById("preview").getElementsByTagName("iframe")[0]),
      code: new Code(document.getElementById("code")),
      warning: new Element(document.getElementById("preview-warning"))
    },
    snippet: new Code(document.getElementById("snippet"))
  });

  this.onbeforeunload = function() {};

}).call(this);
